openapi: 3.0.0
info:
  title: Users API
  description: API for managing users and their information
  version: 1.0.0

paths:
  /api/users:
    get:
      summary: List all users
      description: Retrieves a list of all users from the database with pagination support
      tags:
        - Users

      responses:
        '200':
          description: Successfully retrieved list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Bad request - Invalid pagination parameters
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error occurred

    post:
      summary: Create a new user
      description: Creates a new user account with the provided information
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createUser'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data
        '409':
          description: Conflict - Email already exists
        '500':
          description: Internal Server Error

  /api/users/{uid}:
    get:
      summary: Get user by ID
      description: Retrieves detailed information about a specific user
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User successfully found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal Server Error

    put:
      summary: Update user by ID
      description: Updates the information of an existing user
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Unique identifier of the user to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateUser'
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - Invalid input data
        '404':
          description: User not found
        '500':
          description: Internal Server Error

components:
  schemas:
    User:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
      properties:
        _id:
          type: string
          format: uuid
          description: Unique identifier for the user
        first_name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's first name
        last_name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address (must be unique)
        password:
          type: string
          format: password
          minLength: 8
          description: User's password (will be hashed)
        role:
          type: string
          enum: [user, admin]
          default: user
          description: User's role in the system
        pets:
          type: array
          items:
            type: string
            format: uuid
          description: Array of pet IDs associated with the user
      example:
        _id: "550e8400-e29b-41d4-a716-446655440000"
        first_name: "John"
        last_name: "Doe"
        email: "john.doe@example.com"
        password: "hashedPassword123"
        role: "user"
        pets: ["123e4567-e89b-12d3-a456-426614174000"]

  requestBodies:
    createUser:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's first name
        last_name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          minLength: 8
          description: User's password
        role:
          type: string
          enum: [user, admin]
          default: user
          description: User's role in the system

    updateUser:
      type: object
      properties:
        first_name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's first name
        last_name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          minLength: 8
          description: User's password
        role:
          type: string
          enum: [user, admin]
          description: User's role in the system